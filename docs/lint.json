[
  {
    "name": "Container#wrap",
    "filePath": "scripts/core/ui.js",
    "lines": [
      {
        "lineNumber": 274,
        "line": "  /**\r"
      },
      {
        "lineNumber": 275,
        "line": "   *\r"
      },
      {
        "lineNumber": 276,
        "line": "   * @param mode: flexbox wrap mode, can be wrap, nowrap, or wrap-reverse\r"
      },
      {
        "lineNumber": 277,
        "line": "   * @returns {Container}\r"
      },
      {
        "lineNumber": 278,
        "line": "   */\r"
      },
      {
        "lineNumber": 279,
        "line": "  wrap(mode=\"wrap\") {\r"
      }
    ],
    "codeParams": [
      "mode"
    ],
    "docParams": [
      "mode:"
    ]
  },
  {
    "name": "buildString",
    "filePath": "scripts/core/units.js",
    "lines": [
      {
        "lineNumber": 422,
        "line": "/**\r"
      },
      {
        "lineNumber": 423,
        "line": " *\r"
      },
      {
        "lineNumber": 424,
        "line": " * @param value Note: is not converted to internal unit\r"
      },
      {
        "lineNumber": 425,
        "line": " * @param unit: Unit to use, should be a string referencing unit type, see unitDefine().name\r"
      },
      {
        "lineNumber": 426,
        "line": " * @returns {*}\r"
      },
      {
        "lineNumber": 427,
        "line": " */\r"
      },
      {
        "lineNumber": 428,
        "line": "export function buildString(value, baseUnit=Unit.baseUnit, decimalPlaces=3, displayUnit=Unit.baseUnit) {\r"
      }
    ],
    "codeParams": [
      "value",
      "baseUnit",
      "decimalPlaces",
      "displayUnit"
    ],
    "docParams": [
      "value",
      "unit:"
    ]
  },
  {
    "name": "DataAPI#_addClass",
    "filePath": "scripts/path-controller/controller/controller.js",
    "lines": [
      {
        "lineNumber": 653,
        "line": "  /**\r"
      },
      {
        "lineNumber": 654,
        "line": "   * Look up struct definition for a class.\r"
      },
      {
        "lineNumber": 655,
        "line": "   *\r"
      },
      {
        "lineNumber": 656,
        "line": "   * @param cls: the class\r"
      },
      {
        "lineNumber": 657,
        "line": "   * @param auto_create: If true, automatically create definition if not already existing.\r"
      },
      {
        "lineNumber": 658,
        "line": "   * @returns {IterableIterator<*>}\r"
      },
      {
        "lineNumber": 659,
        "line": "   */\r"
      },
      {
        "lineNumber": 660,
        "line": "\r"
      },
      {
        "lineNumber": 661,
        "line": "  _addClass(cls, dstruct) {\r"
      }
    ],
    "codeParams": [
      "cls",
      "dstruct"
    ],
    "docParams": [
      "cls:",
      "auto_create:"
    ]
  },
  {
    "name": "DataAPI#resolvePath_intern",
    "filePath": "scripts/path-controller/controller/controller.js",
    "lines": [
      {
        "lineNumber": 795,
        "line": "  /**\r"
      },
      {
        "lineNumber": 796,
        "line": "   get meta information for a datapath.\r"
      },
      {
        "lineNumber": 797,
        "line": "\r"
      },
      {
        "lineNumber": 798,
        "line": "   @param ignoreExistence: don't try to get actual data associated with path,\r"
      },
      {
        "lineNumber": 799,
        "line": "   just want meta information\r"
      },
      {
        "lineNumber": 800,
        "line": "   */\r"
      },
      {
        "lineNumber": 801,
        "line": "  resolvePath_intern(ctx, inpath, ignoreExistence = false, p=pathParser) {\r"
      }
    ],
    "codeParams": [
      "ctx",
      "inpath",
      "ignoreExistence",
      "p"
    ],
    "docParams": [
      "ignoreExistence:"
    ]
  },
  {
    "name": "ModelInterface#execOrRedo",
    "filePath": "scripts/path-controller/controller/controller_abstract.js",
    "lines": [
      {
        "lineNumber": 33,
        "line": "  /**\r"
      },
      {
        "lineNumber": 34,
        "line": "   * runs .undo,.redo if toolstack head is same as tool\r"
      },
      {
        "lineNumber": 35,
        "line": "   *\r"
      },
      {
        "lineNumber": 36,
        "line": "   * otherwise, .execTool(ctx, tool) is called.\r"
      },
      {
        "lineNumber": 37,
        "line": "   *\r"
      },
      {
        "lineNumber": 38,
        "line": "   * @param compareInputs : check if toolstack head has identical input values, defaults to false\r"
      },
      {
        "lineNumber": 39,
        "line": "   * */\r"
      },
      {
        "lineNumber": 40,
        "line": "  execOrRedo(ctx, toolop, compareInputs=false) {\r"
      }
    ],
    "codeParams": [
      "ctx",
      "toolop",
      "compareInputs"
    ],
    "docParams": [
      "compareInputs"
    ]
  },
  {
    "name": "ToolStack#execOrRedo",
    "filePath": "scripts/path-controller/toolsys/toolsys.js",
    "lines": [
      {
        "lineNumber": 1339,
        "line": "  /**\r"
      },
      {
        "lineNumber": 1340,
        "line": "   * runs .undo,.redo if toolstack head is same as tool\r"
      },
      {
        "lineNumber": 1341,
        "line": "   *\r"
      },
      {
        "lineNumber": 1342,
        "line": "   * otherwise, .execTool(ctx, tool) is called.\r"
      },
      {
        "lineNumber": 1343,
        "line": "   *\r"
      },
      {
        "lineNumber": 1344,
        "line": "   * @param compareInputs : check if toolstack head has identical input values, defaults to false\r"
      },
      {
        "lineNumber": 1345,
        "line": "   * */\r"
      },
      {
        "lineNumber": 1346,
        "line": "  execOrRedo(ctx, tool, compareInputs=false) {\r"
      }
    ],
    "codeParams": [
      "ctx",
      "tool",
      "compareInputs"
    ],
    "docParams": [
      "compareInputs"
    ]
  },
  {
    "name": "Screen#pickElement",
    "filePath": "scripts/screen/FrameManager.js",
    "lines": [
      {
        "lineNumber": 347,
        "line": "  /** \r"
      },
      {
        "lineNumber": 348,
        "line": "   * @param x\r"
      },
      {
        "lineNumber": 349,
        "line": "   * @param y\r"
      },
      {
        "lineNumber": 350,
        "line": "   * @param args arguments : {sx, sy, nodeclass, excluded_classes}\r"
      },
      {
        "lineNumber": 351,
        "line": "  */\r"
      },
      {
        "lineNumber": 352,
        "line": "  pickElement(x, y, args, sy, nodeclass, excluded_classes) {\r"
      }
    ],
    "codeParams": [
      "x",
      "y",
      "args",
      "sy",
      "nodeclass",
      "excluded_classes"
    ],
    "docParams": [
      "x",
      "y",
      "args"
    ]
  },
  {
    "name": "Screen#popup",
    "filePath": "scripts/screen/FrameManager.js",
    "lines": [
      {
        "lineNumber": 426,
        "line": "  /**\r"
      },
      {
        "lineNumber": 427,
        "line": "   *\r"
      },
      {
        "lineNumber": 428,
        "line": "   * @param popupDelay : if non-zero, wait for popup to layout for popupDelay miliseconds,\r"
      },
      {
        "lineNumber": 429,
        "line": "   *                     then move the popup so it's fully inside the window (if it's outsize).\r"
      },
      {
        "lineNumber": 430,
        "line": "   *\r"
      },
      {
        "lineNumber": 431,
        "line": "    * */\r"
      },
      {
        "lineNumber": 432,
        "line": "  popup(owning_node, elem_or_x, y, closeOnMouseOut=true, popupDelay=250) {\r"
      }
    ],
    "codeParams": [
      "owning_node",
      "elem_or_x",
      "y",
      "closeOnMouseOut",
      "popupDelay"
    ],
    "docParams": [
      "popupDelay"
    ]
  },
  {
    "name": "RichEditor#formatLine",
    "filePath": "scripts/widgets/ui_richedit.js",
    "lines": [
      {
        "lineNumber": 159,
        "line": "  /**\r"
      },
      {
        "lineNumber": 160,
        "line": "  * Only available in textOnlyMode.  Formats html-formated line.\r"
      },
      {
        "lineNumber": 161,
        "line": "   *\r"
      },
      {
        "lineNumber": 162,
        "line": "   * @param line : line to format\r"
      },
      {
        "lineNumber": 163,
        "line": "   * @parem text : whole text\r"
      },
      {
        "lineNumber": 164,
        "line": "  * */\r"
      },
      {
        "lineNumber": 165,
        "line": "  formatLine(line, text) {\r"
      }
    ],
    "codeParams": [
      "line",
      "text"
    ],
    "docParams": [
      "line"
    ]
  }
]