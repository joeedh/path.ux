{
  "metaVersion": 1,
  "versions": [
    {
      "mtime": 1590863771448.7295,
      "relpath": "/page2.html",
      "data": "<h1 id=\"Page-2\">Page 2</h1><p>Path.ux follows a strict model/view/controller paradigm.  The application\nstate is the model, path.ux is the (or a) view, and the controller is\nthe means by which path.ux queries the model.  In addition, there are two\nlayers of controllers: the first, <a href=\"context\">Context</a>, is a simple\n(and application-defined) API to access the application state, while the\nsecond is small scripting language akin to Angle&#39;s data bindings and builds\non the first.</p>\n<p>For example, you might see code like this:</p>\n<pre><code>    function makePanel(layout) {\n    layout.useIcons();\n    layout.prop(&quot;view3d.selectmode&quot;);\n    layout.tool(&quot;view3d.select_all()&quot;);\n  }</code></pre>\n<p>&quot;View3d.selectmode&quot; is a data path.  It&#39;s akin to an object path or Angle&#39;s data bindings.\n  &quot;View3d.select_all()&quot; is a tool path, which is a bit different.  </p>\n<p>Note that path.ux mostly makes use of the data path controller.  It does pass\n  around a (client-provided) Context instance, which is required to have the\n  following properties:</p>\n<ul>\n  <li>api       : a <a href=\"@ModelInterface\">ModelInterface</a> class (typically a <a href=\"@DataAPI\">DataAPI</a> instance)</li>\n  <li>screen    : The current screen, a <a href=\"@Screen\">Screen</a> instance (or subclass of)</li>\n  <li>toolstack : The tool stack, see <a href=\"@ToolStack\">ToolStack</a></li>\n</ul>\n<p>Path.ux allows different controller implementations (though they must all pass type information via the\n  classes in toolprop.js).  The included implementation can be found in\n  &quot;simple_controller.js&quot;, and the abstract interface in &quot;controller.js&quot;.</p>\n<h2 id=\"Context\">Context</h2><h1 id=\"History\">History</h1><p>Path.ux is roughly based on <a href=\"http://www.blender.org\">Blender&#39;s</a> architecture.</p>\n<p><a href=\"manual/controller.html\">Main page</a></p>\n<p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern.  The model is the core code, the view is the UI, and the controller is the glue between them.</p>\n<p>The controller is called &quot;RNA&quot; and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. &quot;object.subobject.some_property&quot;.  Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p>\n<p>Internally the controller has a special wrapper API for blender&#39;s c-struct-based pseudo-objects.  This works extremely well as it keeps type information that&#39;s only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1).  Even better, the object model presented by the controller need not match the internal data structures.</p>\n<p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p>\n<pre><code>def panel(layout, context):\n  row = layout.row\n  row.prop(context.object, &quot;some_object_property&quot;)\n  row.tool(&quot;mesh.subdivide&quot;)</code></pre>\n",
      "isDiff": false
    },
    {
      "mtime": 1590863771448.7295,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux follows a strict model/view/controller paradigm. The application state is the model, path.ux is the (or a) view, and the controller is the means by which path.ux queries thde model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"context\\\">Context</a>, is a simple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590891564165.4854,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfs a strict model/view/controller paradigm. The application state is the model, path.ux is the (or a) view, and the controller is the means by which path.ux queries thde model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Context</a>, is a simple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893336204.55,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfs a strict model/view/controller paradigm. The application state is the mosdel, path.ux is the (or a) view, and the controller is the means by which path.ux queries thde model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Context</a>, is a simple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893410863.3308,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfs a strict model/view/controller paradigm. The application state is the mossdel, path.ux is the (or a) view, and the controller is the means by which path.ux queries thde model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Context</a>, is a simple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893420073.451,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfs a strict model/view/controller paradigm. The application state is the mossdel, paths.ux is the (or a) view, and the controller is the means by which path.ux queries thde model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Context</a>, is a simple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893444743.247,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfs a strict model/view/controller paradigm. The application state is the mossdel, paths.ux is the (or a) view, and the controller is the means by which path.ux queries thdse model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Context</a>, is a simple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893449910.6487,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfs a strict model/view/controller paradigm. The application state is the mossdel, paths.ux is the (or a) view, and the controller is the means by which path.ux queries thdse model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Context</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893453979.462,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfs a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux queries thdse model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Context</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893487374.1328,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfs a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux queries thdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Context</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893489841.148,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfs a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux queries thdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893491490.4082,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfs a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux queries tshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893549420.0881,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfs a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux queries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893551292.163,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfss a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux queries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893552936.1604,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsss a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux queries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893553983.895,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsa a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux queries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893554735.298,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux queries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893555490.62,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux qasdueries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893576019.23,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux qasdasdueries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893576685.7954,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux qasdasdasueries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893578028.3284,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux qasdasdasdueries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893578780.4749,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.ux qasdasdasdadsadueries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893579532.2078,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdux qasdasdasdadsadueries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893596545.3137,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdux qasdasdasdadsadueries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893597209.5344,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsaux qasdasdasdadsadueries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893598558.0493,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In addition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893599308.7693,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893696156.9712,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893696814.5427,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfdition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893703718.1257,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfadition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893706871.5105,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaadition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893708213.7273,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaasdition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893709566.3745,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassdition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893710913.1465,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassadition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893711665.467,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893713315.7917,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893714069.3838,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you misght see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893721417.5422,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893722464.1353,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893834766.0325,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893839934.6914,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by dwhich path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893842483.325,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p>Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590893843232.907,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br data-mce-bogus=\\\"1\\\"></p><p><br data-mce-bogus=\\\"1\\\"></p><p> is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590914562222.3047,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br data-mce-bogus=\\\"1\\\"></p><p><br data-mce-bogus=\\\"1\\\"></p><p> is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><code>    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</code></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590914569150.0928,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br></p><p><br></p><p>is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590914676190.2412,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br></p><p><br></p><p>is the smossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590914960046.9038,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br></p><p><br></p><p>is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590914960712.4216,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br></p><p><br></p><p>is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590914973153.3257,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br></p><p><br></p><p>is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590914986208.5603,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br></p><p><br></p><p>is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590914999552.527,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br></p><p><br></p><p>is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915048531.5105,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br></p><p><br></p><p>is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915136395.3152,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br></p><p><br></p><p>is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which path.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915137039.826,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br></p><p><br></p><p>is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915140183.904,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br></p><p><br></p><pre>is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</pre><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915191501.3916,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state</p><p><br></p><p><br></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915199357.3806,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state&nbsp;</p><p><br></p><p><br></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915207600.1252,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state ct</p><p><br></p><p><br></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915208647.5686,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state&nbsp;</p><p><br></p><p><br></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915209392.6853,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state Ctr</p><p><br></p><p><br></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915210144.105,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state Ctrl</p><p><br></p><p><br></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915210893.229,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state Ctrl+</p><p><br></p><p><br></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915211643.1147,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state Ctrl+a</p><p><br></p><p><br></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915212398.0266,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state Ctrl+Al</p><p><br></p><p><br></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915213141.9075,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state Ctrl+Alt</p><p><br></p><p><br></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915213891.9167,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state Ctrl+Alt+Z</p><p><br></p><p><br></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915214644.317,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state <code><strong>Ctrl+Alt+Z﻿</strong></code></div><p><br></p><p><img src=\\\"./assets/page2_image_0mceu_26172723211590915284860.jpg\\\" data-mce-src=\\\"example/assets/page2_image_0mceu_26172723211590915284860.jpg\\\" width=\\\"460\\\" height=\\\"199\\\" data-mce-selected=\\\"1\\\"></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre><div id=\\\"mceResizeHandlenw\\\" data-mce-bogus=\\\"all\\\" class=\\\"mce-resizehandle\\\" unselectable=\\\"true\\\" data-mce-style=\\\"cursor: nw-resize; margin: 0px; padding: 0px; left: 23px; top: 149px;\\\" style=\\\"cursor: nw-resize; margin: 0px; padding: 0px; left: 23px; top: 149px;\\\"></div><div id=\\\"mceResizeHandlene\\\" data-mce-bogus=\\\"all\\\" class=\\\"mce-resizehandle\\\" unselectable=\\\"true\\\" data-mce-style=\\\"cursor: ne-resize; margin: 0px; padding: 0px; left: 483px; top: 149px;\\\" style=\\\"cursor: ne-resize; margin: 0px; padding: 0px; left: 483px; top: 149px;\\\"></div><div id=\\\"mceResizeHandlese\\\" data-mce-bogus=\\\"all\\\" class=\\\"mce-resizehandle\\\" unselectable=\\\"true\\\" data-mce-style=\\\"cursor: se-resize; margin: 0px; padding: 0px; left: 483px; top: 348px;\\\" style=\\\"cursor: se-resize; margin: 0px; padding: 0px; left: 483px; top: 348px;\\\"></div><div id=\\\"mceResizeHandlesw\\\" data-mce-bogus=\\\"all\\\" class=\\\"mce-resizehandle\\\" unselectable=\\\"true\\\" data-mce-style=\\\"cursor: sw-resize; margin: 0px; padding: 0px; left: 23px; top: 348px;\\\" style=\\\"cursor: sw-resize; margin: 0px; padding: 0px; left: 23px; top: 348px;\\\"></div>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915298664.4346,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application state <code><strong>Ctrl+Alt+Z﻿</strong></code></div><p><br></p><p><img src=\\\"./assets/page2_image_0mceu_26172723211590915284860.jpg\\\" data-mce-src=\\\"example/assets/page2_image_0mceu_26172723211590915284860.jpg\\\" width=\\\"469\\\" height=\\\"203\\\" style=\\\"float: left;\\\" data-mce-style=\\\"float: left;\\\"></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590915321749.4746,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a href=\\\"#Page-2\\\" data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a href=\\\"#Context\\\" data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a href=\\\"#History\\\" data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p><img src=\\\"./assets/page2_image_0mceu_26172723211590915284860.jpg\\\" data-mce-src=\\\"example/assets/page2_image_0mceu_26172723211590915284860.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-selected=\\\"1\\\"></p><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In adasdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre><div id=\\\"mceResizeHandlenw\\\" data-mce-bogus=\\\"all\\\" class=\\\"mce-resizehandle\\\" unselectable=\\\"true\\\" data-mce-style=\\\"cursor: nw-resize; margin: 0px; padding: 0px; left: -5px; top: 243px;\\\" style=\\\"cursor: nw-resize; margin: 0px; padding: 0px; left: -5px; top: 243px;\\\"></div><div id=\\\"mceResizeHandlene\\\" data-mce-bogus=\\\"all\\\" class=\\\"mce-resizehandle\\\" unselectable=\\\"true\\\" data-mce-style=\\\"cursor: ne-resize; margin: 0px; padding: 0px; left: 263px; top: 243px;\\\" style=\\\"cursor: ne-resize; margin: 0px; padding: 0px; left: 263px; top: 243px;\\\"></div><div id=\\\"mceResizeHandlese\\\" data-mce-bogus=\\\"all\\\" class=\\\"mce-resizehandle\\\" unselectable=\\\"true\\\" data-mce-style=\\\"cursor: se-resize; margin: 0px; padding: 0px; left: 263px; top: 359px;\\\" style=\\\"cursor: se-resize; margin: 0px; padding: 0px; left: 263px; top: 359px;\\\"></div><div id=\\\"mceResizeHandlesw\\\" data-mce-bogus=\\\"all\\\" class=\\\"mce-resizehandle\\\" unselectable=\\\"true\\\" data-mce-style=\\\"cursor: sw-resize; margin: 0px; padding: 0px; left: -5px; top: 359px;\\\" style=\\\"cursor: sw-resize; margin: 0px; padding: 0px; left: -5px; top: 359px;\\\"></div>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966145180.9004,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a href=\\\"#Page-2\\\" data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a href=\\\"#Context\\\" data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a href=\\\"#History\\\" data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p><img src=\\\"./assets/page2_image_0mceu_26172723211590915284860.jpg\\\" data-mce-src=\\\"example/assets/page2_image_0mceu_26172723211590915284860.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"text-indent: 28px; float: left;\\\"></p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966146070.3557,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a href=\\\"#Page-2\\\" data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a href=\\\"#Context\\\" data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a href=\\\"#History\\\" data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0mceu_26172723211590915284860.jpg\\\" data-mce-src=\\\"example/assets/page2_image_0mceu_26172723211590915284860.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966149212.2305,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a data-mce-href=\\\"#Page-2\\\" _href=\\\"#Page-2\\\" href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\" _href=\\\"#Context\\\" href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\" _href=\\\"#History\\\" href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\" _href=\\\"null\\\" href=\\\"null\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0mceu_26172723211590915284860.jpg\\\" data-mce-src=\\\"example/assets/page2_image_0mceu_26172723211590915284860.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\" _href=\\\"null\\\" href=\\\"null\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\" _href=\\\"null\\\" href=\\\"null\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\" _href=\\\"null\\\" href=\\\"null\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\" _href=\\\"null\\\" href=\\\"null\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\" _href=\\\"null\\\" href=\\\"null\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\" _href=\\\"null\\\" href=\\\"null\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966185652.6501,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\" data-mce-selected=\\\"1\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre><div id=\\\"mceResizeHandlenw\\\" data-mce-bogus=\\\"all\\\" class=\\\"mce-resizehandle\\\" unselectable=\\\"true\\\" data-mce-style=\\\"cursor: nw-resize; margin: 0px; padding: 0px; left: -5px; top: 720px;\\\" style=\\\"cursor: nw-resize; margin: 0px; padding: 0px; left: -5px; top: 720px;\\\"></div><div id=\\\"mceResizeHandlene\\\" data-mce-bogus=\\\"all\\\" class=\\\"mce-resizehandle\\\" unselectable=\\\"true\\\" data-mce-style=\\\"cursor: ne-resize; margin: 0px; padding: 0px; left: 263px; top: 720px;\\\" style=\\\"cursor: ne-resize; margin: 0px; padding: 0px; left: 263px; top: 720px;\\\"></div><div id=\\\"mceResizeHandlese\\\" data-mce-bogus=\\\"all\\\" class=\\\"mce-resizehandle\\\" unselectable=\\\"true\\\" data-mce-style=\\\"cursor: se-resize; margin: 0px; padding: 0px; left: 263px; top: 836px;\\\" style=\\\"cursor: se-resize; margin: 0px; padding: 0px; left: 263px; top: 836px;\\\"></div><div id=\\\"mceResizeHandlesw\\\" data-mce-bogus=\\\"all\\\" class=\\\"mce-resizehandle\\\" unselectable=\\\"true\\\" data-mce-style=\\\"cursor: sw-resize; margin: 0px; padding: 0px; left: -5px; top: 836px;\\\" style=\\\"cursor: sw-resize; margin: 0px; padding: 0px; left: -5px; top: 836px;\\\"></div>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966324826.9792,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\"><p class=\\\"notebox\\\">Path.ux followdsfsssasdsadsadasd a strict model/view/controller paradigm. The application sta</p><div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966346040.1924,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">Path.ux followdsfs</div><div class=\\\"notebox\\\">sdf</div><div class=\\\"notebox\\\"><br data-mce-bogus=\\\"1\\\"></div><div class=\\\"notebox\\\">ssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966382264.9563,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">Path.ux followdsfs</div><div class=\\\"notebox\\\">sdfsdfdsf</div><div class=\\\"notebox\\\">sdfd</div><div class=\\\"notebox\\\"><br data-mce-bogus=\\\"1\\\"></div><div class=\\\"notebox\\\">ssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966383007.185,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">Path.ux followdsfs</div><div class=\\\"notebox\\\">sdfsdfdsf</div><div class=\\\"notebox\\\">sdfds</div><div class=\\\"notebox\\\"><br data-mce-bogus=\\\"1\\\"></div><div class=\\\"notebox\\\">ssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966383754.3506,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">Path.ux followdsfs</div><p class=\\\"notebox\\\">sdfsdfdsf</p><div class=\\\"notebox\\\">sdfds</div><div class=\\\"notebox\\\"><br data-mce-bogus=\\\"1\\\"></div><div class=\\\"notebox\\\">ssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966388705.8066,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">b</div><div class=\\\"notebox\\\"><br data-mce-bogus=\\\"1\\\"></div><div class=\\\"notebox\\\">ssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966394254.595,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><div class=\\\"notebox\\\">bleh</div><div class=\\\"notebox\\\"><br data-mce-bogus=\\\"1\\\"></div><div class=\\\"notebox\\\">ssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966395010.115,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">bleh</p><div class=\\\"notebox\\\"><br data-mce-bogus=\\\"1\\\"></div><div class=\\\"notebox\\\">ssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966395765.7322,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">bsdfleh</p><p class=\\\"notebox\\\"><br data-mce-bogus=\\\"1\\\"></p><div class=\\\"notebox\\\"><br data-mce-bogus=\\\"1\\\"></div><div class=\\\"notebox\\\">ssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contents</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966411974.5261,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">bsdfleh</p><p class=\\\"notebox\\\"><br data-mce-bogus=\\\"1\\\"></p><div class=\\\"notebox\\\"><br data-mce-bogus=\\\"1\\\"></div><div class=\\\"notebox\\\">ssasdsadsadasd a strict model/view/controller paradigm. The application sta<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contentss</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966429816.454,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">bsdfleh</p><p class=\\\"notebox\\\"><br></p><div class=\\\"notebox\\\"><br></div><div class=\\\"notebox\\\">ssasdsadsadasd a strict model/view/controller paradigm. The application stas<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contentss</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966433254.7163,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":8,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1 id=\\\"Page-2\\\">Page 2</h1><p class=\\\"notebox\\\">bsdfleh</p><p class=\\\"notebox\\\"><br></p><div class=\\\"notebox\\\"><br></div><div class=\\\"notebox\\\">ssasdsadsadasd a strict model/view/controller paradigm. The application stasas<div class=\\\"mce-toc\\\" contenteditable=\\\"false\\\"><h2 contenteditable=\\\"true\\\">Table of Contentss</h2><ul><li><a data-mce-href=\\\"#Page-2\\\">Page 2</a><ul><li><a data-mce-href=\\\"#Context\\\">Context</a></li></ul></li><li><a data-mce-href=\\\"#History\\\">History</a></li></ul></div>te <code><strong>Ctrl+Alt+Z</strong></code></div><p class=\\\"notebox\\\">is the mossdel, pathes.ux is the (or a) view, and the controller is the means by which padth.asdasdasdsadsadux qasdasdasdadsadueries stshdese model. In ad</p><p class=\\\"notebox\\\">asdfaassaasdsadsaddition, there are two layers of controllers: the first, <a data-mce-href=\\\"example/context\\\">Conteext</a>, is a simsple (and application-defined) API to access the application state, while the second is small scripting language akin to Angle's data bindings and builds on the first.</p><p>For example, you might see code like this:</p><pre><span style=\\\"color: rgb(185, 106, 217);\\\" data-mce-style=\\\"color: #b96ad9;\\\">    function makePanel(layout) {\",\"+    layout.useIcons();\",\"+    layout.prop(\\\"view3d.selectmode\\\");\",\"+    layout.tool(\\\"view3d.select_all()\\\");\",\"+  }</span></pre><p>\\\"View3d.selectmode\\\" is a data path. It's akin to an object path or Angle's data bindings. \\\"View3d.select_all()\\\" is a tool path, which is a bit different.</p><p>Note&nbsp;</p><p><img src=\\\"./assets/page2_image_0imagetools2.jpg\\\" width=\\\"268\\\" height=\\\"116\\\" data-mce-style=\\\"float: left;\\\" style=\\\"float: left;\\\" data-mce-src=\\\"example/assets/page2_image_0imagetools2.jpg\\\"></p><p>that path.ux mostly makes use of the data path controller. It does pass around a (client-provided) Context instance, which is required to have the following properties:</p><ul><li>api : a <a data-mce-href=\\\"example/@ModelInterface\\\">ModelInterface</a> class (typically a <a data-mce-href=\\\"example/@DataAPI\\\">DataAPI</a> instance)</li><li>screen : The current screen, a <a data-mce-href=\\\"example/@Screen\\\">Screen</a> instance (or subclass of)</li><li>toolstack : The tool stack, see <a data-mce-href=\\\"example/@ToolStack\\\">ToolStack</a></li></ul><p>Path.ux allows different controller implementations (though they must all pass type information via the classes in toolprop.js). The included implementation can be found in \\\"simple_controller.js\\\", and the abstract interface in \\\"controller.js\\\".</p><h2 id=\\\"Context\\\">Context</h2><h1 id=\\\"History\\\">History</h1><p>Path.ux is roughly based on <a data-mce-href=\\\"http://www.blender.org\\\">Blender's</a> architecture.</p><p><a data-mce-href=\\\"example/manual/controller.html\\\">Main page</a></p><p>The Blender 2.5 project refactored the internal architecture into a rough MVC pattern. The model is the core code, the view is the UI, and the controller is the glue between them.</p><p>The controller is called \\\"RNA\\\" and it uses the concept of object paths. So if you have an object, you could look up type information (and the value of) a property with a simple path, e.g. \\\"object.subobject.some_property\\\". Blender uses RNA for its user interface, its python api and its animation system (you can associate object paths with animation curves).</p><p>Internally the controller has a special wrapper API for blender's c-struct-based pseudo-objects. This works extremely well as it keeps type information that's only used by the UI out of the model codebase (e.g. the model might not care that a specific color should be clamped to 0-2 instead of 0-1). Even better, the object model presented by the controller need not match the internal data structures.</p><p>Since the controller provides type info to the UI a lot of messy boilerplate is avoided, leading to very consise layout code:</p><pre><code>def panel(layout, context):\",\"+  row = layout.row\",\"+  row.prop(context.object, \\\"some_object_property\\\")\",\"+  row.tool(\\\"mesh.subdivide\\\")</code></pre>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966434006.9626,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<p>P</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966692757.8179,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<p>Page 3</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966693418.5425,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>We</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966700784.4663,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>Welcome to&nbsp;</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966701518.9314,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>Welcome to page 3;</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966702265.8252,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>Welcome to page 3;</p><p>N</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966703925.4683,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>Welcome to page 3;</p><p>Note</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966704665.5747,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>Welcome to page 3;</p><p>Noe</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966705415.3667,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>Welcome to page 3;</p><p>Notebo</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966706165.1008,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>Welcome to page 3;</p><p>Notebox</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966706915.4587,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>Welcome to page 3;</p><p>Notebox</p><p>YA</p><p><br data-mce-bogus=\\\"1\\\"></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966728670.7246,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>Welcome to page 3;</p><p>Notebox</p><p>YA</p><p><br data-mce-bogus=\\\"1\\\"></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966729415.103,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>Welcome to page 3;</p><p>Notebox</p><p>Yay</p><p><br data-mce-bogus=\\\"1\\\"></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966730169.3936,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>Yayy</p><p><br data-mce-bogus=\\\"1\\\"></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966751324.5154,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>Yay</p><p><br data-mce-bogus=\\\"1\\\"></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966752066.6523,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3sadas</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>Yay</p><p><br data-mce-bogus=\\\"1\\\"></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966801743.579,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3sadasdasdsadas</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>Yay</p><p><br data-mce-bogus=\\\"1\\\"></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966802469.9043,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3sadasdasds</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>Yay</p><p><br data-mce-bogus=\\\"1\\\"></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966803213.9822,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>Yay</p><p><br data-mce-bogus=\\\"1\\\"></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966803981.4824,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<p>Page 3s</p><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>Yay</p><p><br></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966853169.1978,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>Yay</p><p><br></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590966854436.28,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>C</p><p><br></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967084097.3914,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>CTRL</p><p><br></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967084750.2668,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>CT</p><p><br></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967085500.1533,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>Ctrl+</p><p><br></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967086249.3616,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>Ctrl+Shift</p><p><br></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967087003.2754,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p>Ctrl+Shift+Z</p><p><br></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967087747.7886,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p><br></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967122699.459,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p>A</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967228158.5945,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p>Al</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967228819.5974,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p>Alt</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967229559.033,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p>Al</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967230310.0007,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p><br></p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967231058.1682,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p>C</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967233019.8638,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p>Ctrl+</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967233762.0044,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p>Ctrl+A</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967234511.8794,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p>Ctrl+A</p><p>S</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1590967236760.1365,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"\\\\ No newline at end of file\",\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p><span class=\\\"hotkey\\\">Ctrl+A</span></p><p>S</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1608332551753.156,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"+<h1>dPage 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p><span class=\\\"hotkey\\\">Ctrl+A</span></p><p>S</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1608728249755.1938,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"+<h1>ddPage 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p><span class=\\\"hotkey\\\">Ctrl+A</span></p><p>S</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1608728251092.028,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"+<h1>dPage 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p><span class=\\\"hotkey\\\">Ctrl+A</span></p><p>S</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1608728253956.747,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"+<h1>Page 3s</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p><span class=\\\"hotkey\\\">Ctrl+A</span></p><p>S</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    },
    {
      "mtime": 1608728255895.5752,
      "relpath": "/page2.html",
      "data": "{\"oldFileName\":\"/page2.html\",\"newFileName\":\"/page2.html\",\"hunks\":[{\"oldStart\":1,\"oldLines\":0,\"newStart\":1,\"newLines\":1,\"lines\":[\"+<h1>Page 3</h1><p>Welcome to page 3;</p><p class=\\\"notebox\\\">Notebox</p><p><span class=\\\"hotkey\\\">Ctrl+Shift+Z</span></p><p><span class=\\\"hotkey\\\">Ctrl+A</span></p><p>S</p>\",\"\\\\ No newline at end of file\"]}]}",
      "isDiff": true
    }
  ],
  "relpath": "",
  "headVersion": {
    "mtime": 0,
    "relpath": "",
    "data": "",
    "isDiff": false
  }
}